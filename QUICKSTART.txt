LINGUANA - QUICK START GUIDE
============================

Get Linguana running locally in under 10 minutes!

PREREQUISITES
-------------
âœ“ Python 3.10+
âœ“ Node.js 18+
âœ“ PostgreSQL 14+ (or use SQLite for testing)
âœ“ Redis 7+
âœ“ Git

STEP 1: CLONE & SETUP BACKEND (3 minutes)
==========================================

1. Navigate to backend directory:
   cd /home/kcelestinomaria/startuprojects/linguana/backend

2. Create virtual environment:
   python3 -m venv venv
   source venv/bin/activate  # Linux/Mac
   # OR
   venv\Scripts\activate     # Windows

3. Install dependencies:
   pip install --upgrade pip
   pip install -r requirements.txt

4. Setup environment:
   cp .env.example .env
   
   Edit .env (minimum required):
   DEBUG=True
   SECRET_KEY=your-secret-key-here
   DATABASE_URL=sqlite:///db.sqlite3  # Or PostgreSQL URL
   REDIS_URL=redis://localhost:6379/0

5. Run migrations:
   python manage.py migrate

6. Create superuser:
   python manage.py createsuperuser
   # Follow prompts

7. Create initial badges:
   python manage.py create_badges

8. Start Django server:
   python manage.py runserver
   # Backend running at http://localhost:8000

STEP 2: START REDIS & CELERY (1 minute)
========================================

Open new terminal:

1. Start Redis:
   redis-server
   # Or if installed via package manager:
   sudo systemctl start redis

2. Start Celery worker (new terminal):
   cd /home/kcelestinomaria/startuprojects/linguana/backend
   source venv/bin/activate
   celery -A linguana worker -l info

STEP 3: SETUP ASR SERVICE (2 minutes)
======================================

Open new terminal:

1. Navigate to ASR service:
   cd /home/kcelestinomaria/startuprojects/linguana/asr_service

2. Create virtual environment:
   python3 -m venv venv
   source venv/bin/activate

3. Install dependencies:
   pip install -r requirements.txt
   # Note: This will download Whisper models (~1GB)

4. Start ASR service:
   python main.py
   # ASR service running at http://localhost:8001

STEP 4: SETUP FRONTEND (3 minutes)
===================================

Open new terminal:

1. Navigate to frontend:
   cd /home/kcelestinomaria/startuprojects/linguana/frontend

2. Install dependencies:
   npm install
   # This may take 2-3 minutes

3. Create environment file:
   Create .env.local with:
   NEXT_PUBLIC_API_URL=http://localhost:8000
   NEXT_PUBLIC_WS_URL=ws://localhost:8000
   NEXT_PUBLIC_BASE_CHAIN_ID=84532

4. Start development server:
   npm run dev
   # Frontend running at http://localhost:3000

STEP 5: VERIFY INSTALLATION
============================

1. Open browser: http://localhost:3000

2. You should see Linguana homepage

3. Test registration:
   - Click "Sign Up"
   - Create account
   - You should be redirected to dashboard

4. Check API documentation:
   http://localhost:8000/api/docs/

5. Check admin panel:
   http://localhost:8000/admin/
   Login with superuser credentials

QUICK TEST WORKFLOW
====================

Test the complete flow:

1. Register as contributor
2. Record a short audio clip
3. View pronunciation feedback
4. Submit for annotation
5. Register as validator (different account)
6. Fetch annotation task
7. Annotate the clip
8. Check rewards in dashboard

TROUBLESHOOTING
===============

Issue: "ModuleNotFoundError"
Solution: Ensure virtual environment is activated and dependencies installed

Issue: "Connection refused" for Redis
Solution: Start Redis server: redis-server

Issue: "Database error"
Solution: Run migrations: python manage.py migrate

Issue: "Port already in use"
Solution: Kill process or use different port:
  python manage.py runserver 8001

Issue: Celery not processing tasks
Solution: Check Redis is running and Celery worker is started

Issue: ASR service slow
Solution: First run downloads models. Subsequent runs are faster.

Issue: Frontend not connecting to backend
Solution: Check NEXT_PUBLIC_API_URL in .env.local

DEVELOPMENT WORKFLOW
====================

Daily Development:
------------------
1. Start Redis: redis-server
2. Start Backend: python manage.py runserver
3. Start Celery: celery -A linguana worker -l info
4. Start ASR: python main.py (in asr_service)
5. Start Frontend: npm run dev (in frontend)

Making Changes:
---------------
Backend:
- Models: Create migration after changes
  python manage.py makemigrations
  python manage.py migrate

- New dependencies: Add to requirements.txt
  pip install package_name
  pip freeze > requirements.txt

Frontend:
- New dependencies: npm install package_name
- Build for production: npm run build

DATABASE SETUP (Optional)
==========================

Using PostgreSQL (Recommended for production):

1. Install PostgreSQL:
   sudo apt install postgresql postgresql-contrib  # Ubuntu
   brew install postgresql  # Mac

2. Create database:
   sudo -u postgres psql
   CREATE DATABASE linguana_db;
   CREATE USER linguana_user WITH PASSWORD 'your_password';
   GRANT ALL PRIVILEGES ON DATABASE linguana_db TO linguana_user;
   \q

3. Update .env:
   DATABASE_URL=postgresql://linguana_user:your_password@localhost:5432/linguana_db

4. Run migrations:
   python manage.py migrate

OPTIONAL CONFIGURATIONS
=======================

AWS S3 for Audio Storage:
--------------------------
1. Create S3 bucket
2. Create IAM user with S3 access
3. Update .env:
   AWS_ACCESS_KEY_ID=your_key
   AWS_SECRET_ACCESS_KEY=your_secret
   AWS_STORAGE_BUCKET_NAME=your_bucket

Firebase Authentication:
------------------------
1. Create Firebase project
2. Download credentials JSON
3. Update .env:
   FIREBASE_CREDENTIALS_PATH=/path/to/firebase-credentials.json

Base L2 Blockchain:
-------------------
1. Get Base Sepolia RPC URL
2. Deploy smart contract
3. Fund wallet with test USDC
4. Update .env:
   BASE_RPC_URL=https://sepolia.base.org
   REWARD_CONTRACT_ADDRESS=0x...
   REWARD_PRIVATE_KEY=0x...

USEFUL COMMANDS
===============

Backend:
--------
python manage.py shell          # Django shell
python manage.py dbshell        # Database shell
python manage.py test           # Run tests
python manage.py collectstatic  # Collect static files
python manage.py createsuperuser # Create admin user

Celery:
-------
celery -A linguana worker -l info     # Start worker
celery -A linguana beat -l info       # Start scheduler
celery -A linguana flower             # Start monitoring UI

Frontend:
---------
npm run dev         # Development server
npm run build       # Production build
npm run start       # Production server
npm run lint        # Lint code
npm test            # Run tests

NEXT STEPS
==========

1. Read full documentation:
   - README.txt
   - API_DOCUMENTATION.txt
   - DEPLOYMENT.txt
   - TESTING_GUIDE.txt

2. Explore the codebase:
   - Backend: Django apps in backend/
   - Frontend: React components in frontend/
   - ASR: FastAPI service in asr_service/

3. Customize for your needs:
   - Add new dialects
   - Modify reward amounts
   - Customize UI theme
   - Add new features

4. Deploy to production:
   - Follow DEPLOYMENT.txt
   - Setup CI/CD pipeline
   - Configure monitoring

GETTING HELP
============

1. Check documentation files
2. Review API docs: http://localhost:8000/api/docs/
3. Check logs:
   - Backend: backend/logs/linguana.log
   - Celery: Terminal output
   - Frontend: Browser console

4. Common issues documented in TESTING_GUIDE.txt

CONGRATULATIONS!
================

You now have Linguana running locally! ðŸŽ‰

Start building, testing, and contributing to the platform.

For questions or contributions, refer to the project documentation.

Happy coding! ðŸš€
