LINGUANA DEPLOYMENT GUIDE
=========================

PREREQUISITES
-------------
- Python 3.10+
- Node.js 18+
- PostgreSQL 14+
- Redis 7+
- AWS S3 bucket (for audio storage)
- Base L2 wallet with USDC (for rewards)
- Firebase project (for social auth)

PRODUCTION DEPLOYMENT
---------------------

1. DATABASE SETUP
   ----------------
   PostgreSQL:
   CREATE DATABASE linguana_db;
   CREATE USER linguana_user WITH PASSWORD 'secure_password';
   GRANT ALL PRIVILEGES ON DATABASE linguana_db TO linguana_user;

2. BACKEND DEPLOYMENT
   -------------------
   a) Clone repository
   b) Setup virtual environment:
      python3 -m venv venv
      source venv/bin/activate
      pip install -r requirements.txt
      pip install gunicorn daphne

   c) Configure environment variables in .env:
      DEBUG=False
      SECRET_KEY=<generate-strong-secret-key>
      ALLOWED_HOSTS=api.linguana.com
      DATABASE_URL=postgresql://linguana_user:password@localhost:5432/linguana_db
      REDIS_URL=redis://localhost:6379/0
      AWS_ACCESS_KEY_ID=<your-aws-key>
      AWS_SECRET_ACCESS_KEY=<your-aws-secret>
      AWS_STORAGE_BUCKET_NAME=linguana-audio
      FIREBASE_CREDENTIALS_PATH=/path/to/firebase-credentials.json
      BASE_RPC_URL=https://mainnet.base.org
      BASE_CHAIN_ID=8453
      REWARD_CONTRACT_ADDRESS=<usdc-contract-address>
      REWARD_PRIVATE_KEY=<reward-wallet-private-key>

   d) Run migrations:
      python manage.py migrate
      python manage.py collectstatic --noinput
      python manage.py createsuperuser
      python manage.py create_badges

   e) Setup systemd services:
      
      /etc/systemd/system/linguana-api.service:
      [Unit]
      Description=Linguana API
      After=network.target

      [Service]
      User=www-data
      Group=www-data
      WorkingDirectory=/var/www/linguana/backend
      Environment="PATH=/var/www/linguana/backend/venv/bin"
      ExecStart=/var/www/linguana/backend/venv/bin/gunicorn \
          --workers 4 \
          --bind 0.0.0.0:8000 \
          --timeout 120 \
          linguana.wsgi:application

      [Install]
      WantedBy=multi-user.target

      /etc/systemd/system/linguana-websocket.service:
      [Unit]
      Description=Linguana WebSocket
      After=network.target

      [Service]
      User=www-data
      Group=www-data
      WorkingDirectory=/var/www/linguana/backend
      Environment="PATH=/var/www/linguana/backend/venv/bin"
      ExecStart=/var/www/linguana/backend/venv/bin/daphne \
          -b 0.0.0.0 \
          -p 8001 \
          linguana.asgi:application

      [Install]
      WantedBy=multi-user.target

      /etc/systemd/system/linguana-celery.service:
      [Unit]
      Description=Linguana Celery Worker
      After=network.target

      [Service]
      User=www-data
      Group=www-data
      WorkingDirectory=/var/www/linguana/backend
      Environment="PATH=/var/www/linguana/backend/venv/bin"
      ExecStart=/var/www/linguana/backend/venv/bin/celery \
          -A linguana worker \
          -l info \
          --concurrency=4

      [Install]
      WantedBy=multi-user.target

   f) Enable and start services:
      sudo systemctl enable linguana-api
      sudo systemctl enable linguana-websocket
      sudo systemctl enable linguana-celery
      sudo systemctl start linguana-api
      sudo systemctl start linguana-websocket
      sudo systemctl start linguana-celery

3. ASR SERVICE DEPLOYMENT
   -----------------------
   a) Setup on GPU-enabled server:
      cd asr_service
      python3 -m venv venv
      source venv/bin/activate
      pip install -r requirements.txt

   b) Create systemd service:
      /etc/systemd/system/linguana-asr.service:
      [Unit]
      Description=Linguana ASR Service
      After=network.target

      [Service]
      User=www-data
      Group=www-data
      WorkingDirectory=/var/www/linguana/asr_service
      Environment="PATH=/var/www/linguana/asr_service/venv/bin"
      ExecStart=/var/www/linguana/asr_service/venv/bin/uvicorn \
          main:app \
          --host 0.0.0.0 \
          --port 8001 \
          --workers 2

      [Install]
      WantedBy=multi-user.target

   c) Enable and start:
      sudo systemctl enable linguana-asr
      sudo systemctl start linguana-asr

4. NGINX CONFIGURATION
   --------------------
   /etc/nginx/sites-available/linguana:

   server {
       listen 80;
       server_name api.linguana.com;
       return 301 https://$server_name$request_uri;
   }

   server {
       listen 443 ssl http2;
       server_name api.linguana.com;

       ssl_certificate /etc/letsencrypt/live/api.linguana.com/fullchain.pem;
       ssl_certificate_key /etc/letsencrypt/live/api.linguana.com/privkey.pem;

       client_max_body_size 20M;

       location /api/ {
           proxy_pass http://127.0.0.1:8000;
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header X-Forwarded-Proto $scheme;
       }

       location /ws/ {
           proxy_pass http://127.0.0.1:8001;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection "upgrade";
           proxy_set_header Host $host;
       }

       location /static/ {
           alias /var/www/linguana/backend/staticfiles/;
       }

       location /media/ {
           alias /var/www/linguana/backend/media/;
       }
   }

   Enable site:
   sudo ln -s /etc/nginx/sites-available/linguana /etc/nginx/sites-enabled/
   sudo nginx -t
   sudo systemctl reload nginx

5. FRONTEND DEPLOYMENT (Vercel)
   -----------------------------
   a) Push code to GitHub
   b) Connect repository to Vercel
   c) Configure environment variables:
      NEXT_PUBLIC_API_URL=https://api.linguana.com
      NEXT_PUBLIC_WS_URL=wss://api.linguana.com
      NEXT_PUBLIC_BASE_CHAIN_ID=8453
   d) Deploy

   Alternative (Self-hosted):
   npm run build
   npm start
   
   Or use PM2:
   pm2 start npm --name "linguana-frontend" -- start
   pm2 save
   pm2 startup

6. SSL CERTIFICATES
   -----------------
   Using Let's Encrypt:
   sudo apt install certbot python3-certbot-nginx
   sudo certbot --nginx -d api.linguana.com
   sudo certbot renew --dry-run

7. MONITORING & LOGGING
   ---------------------
   - Setup log rotation for Django logs
   - Configure Sentry for error tracking
   - Use Prometheus + Grafana for metrics
   - Monitor Celery tasks with Flower:
     celery -A linguana flower --port=5555

8. SECURITY CHECKLIST
   -------------------
   ✓ Change DEBUG to False
   ✓ Use strong SECRET_KEY
   ✓ Configure ALLOWED_HOSTS
   ✓ Enable HTTPS only
   ✓ Setup firewall (ufw/iptables)
   ✓ Secure database credentials
   ✓ Rotate API keys regularly
   ✓ Enable rate limiting
   ✓ Setup backup strategy
   ✓ Configure CORS properly
   ✓ Secure Redis with password
   ✓ Use environment variables for secrets

9. BACKUP STRATEGY
   ----------------
   Database:
   pg_dump linguana_db > backup_$(date +%Y%m%d).sql
   
   Media files:
   aws s3 sync s3://linguana-audio /backups/audio/
   
   Automate with cron:
   0 2 * * * /path/to/backup_script.sh

10. SCALING CONSIDERATIONS
    ----------------------
    - Use load balancer for multiple API instances
    - Separate Celery workers by task type
    - Cache frequently accessed data with Redis
    - Use CDN for static assets
    - Consider managed database (RDS)
    - Monitor and optimize database queries
    - Implement rate limiting per user

TROUBLESHOOTING
---------------
Check service status:
  sudo systemctl status linguana-api
  sudo systemctl status linguana-celery

View logs:
  sudo journalctl -u linguana-api -f
  tail -f /var/www/linguana/backend/logs/linguana.log

Test database connection:
  python manage.py dbshell

Test Redis connection:
  redis-cli ping

Restart services:
  sudo systemctl restart linguana-api
  sudo systemctl restart linguana-celery
  sudo systemctl restart nginx
